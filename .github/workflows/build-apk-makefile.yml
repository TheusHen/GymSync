name: Build APK, Upload to BrowserStack App Automate and Collect Results

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build_apk:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y curl git unzip xz-utils zip make libglu1-mesa libc6:amd64 libstdc++6:amd64 lib32z1 libbz2-1.0:amd64

      - name: Download and set up Flutter
        run: |
          curl -O https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_3.32.6-stable.tar.xz
          tar xf flutter_linux_3.32.6-stable.tar.xz
          echo "$PWD/flutter/bin" >> $GITHUB_PATH
          export PATH="$PWD/flutter/bin:$PATH"
          flutter --version

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Verify environments
        run: |
          flutter --version
          dart --version
          node --version
          npm --version

      - name: Build APK with Makefile
        run: make apk

      - name: Check if APK was generated
        run: |
          if [ ! -f apps/mobile_app/build/app/outputs/flutter-apk/app-release.apk ]; then
            echo "APK not found!"
            exit 1
          fi

      - name: Ensure Android SDK & Build Tools
        run: |
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true
          $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Build Espresso test APK
        run: |
          cd apps/mobile_app/android
          ./gradlew assembleDebug assembleDebugAndroidTest -x lint -x test -x connectedAndroidTest
          cd ../../../

      - name: Detect AndroidTest APK location
        id: detect_apk
        run: |
          set -e
          POSSIBLE_PATHS=(
            "apps/mobile_app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk"
            "apps/mobile_app/build/app/outputs/flutter-apk/app-debug-androidTest.apk"
            "apps/mobile_app/android/app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk"
            "apps/mobile_app/build/app/outputs/apk/androidTest/debug/app-debug-androidTest.apk"
            "apps/mobile_app/app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk"
          )
          APK_PATH=""
          for path in "${POSSIBLE_PATHS[@]}"; do
            if [ -f "$path" ]; then
              APK_PATH="$path"
              break
            fi
          done
          if [ -z "$APK_PATH" ]; then
            FOUND=$(find apps/mobile_app -name "app-debug-androidTest.apk" | head -n 1)
            if [ -n "$FOUND" ]; then
              APK_PATH="$FOUND"
            fi
          fi
          if [ -z "$APK_PATH" ]; then
            echo "AndroidTest APK not found in any known location!"
            exit 1
          fi
          echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT

      - name: Upload app APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: apps/mobile_app/build/app/outputs/flutter-apk/app-release.apk

      - name: Upload Espresso test APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: espresso-test-apk
          path: ${{ steps.detect_apk.outputs.apk_path }}

  browserstack_test:
    needs: build_apk
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: app-release-apk
          path: ./apk/

      - name: Download Espresso test APK artifact
        uses: actions/download-artifact@v4
        with:
          name: espresso-test-apk
          path: ./tests/

      - name: Detect Espresso APK
        id: detect_apk_test
        run: |
          TEST_APK_PATH=$(find ./tests -name "app-debug-androidTest.apk" | head -n 1)
          if [ -z "$TEST_APK_PATH" ]; then
            echo "Test APK not found!"
            exit 1
          fi
          echo "apk_path=$TEST_APK_PATH" >> $GITHUB_OUTPUT

      - name: Verify downloaded artifacts and paths
        run: |
          echo "APK directory contents:"
          ls -lh ./apk
          file ./apk/app-release.apk
          echo "Test APK directory contents:"
          ls -lh ./tests
          file "${{ steps.detect_apk_test.outputs.apk_path }}"
          if [ ! -s ./apk/app-release.apk ]; then
            echo "App APK não encontrado ou está vazio!"
            exit 1
          fi
          if [ ! -s "${{ steps.detect_apk_test.outputs.apk_path }}" ]; then
            echo "Test APK não encontrado ou está vazio!"
            exit 1
          fi

      - name: Upload app APK to BrowserStack
        id: upload_app
        env:
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
        run: |
          RESPONSE=$(curl -s -u "${BROWSERSTACK_USERNAME}:${BROWSERSTACK_ACCESS_KEY}" \
            -X POST "https://api-cloud.browserstack.com/app-automate/upload" \
            -F "file=@./apk/app-release.apk")
          echo "RESPONSE: $RESPONSE"
          echo "app_url=$(echo "$RESPONSE" | python3 -c "import sys, json; print(json.load(sys.stdin).get('app_url', ''))")" >> "$GITHUB_OUTPUT"

      - name: Upload Espresso test APK to BrowserStack
        id: upload_test_suite
        env:
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
        run: |
          TEST_APK="${{ steps.detect_apk_test.outputs.apk_path }}"
          RESPONSE=$(curl -s -u "${BROWSERSTACK_USERNAME}:${BROWSERSTACK_ACCESS_KEY}" \
            -X POST "https://api-cloud.browserstack.com/app-automate/espresso/test-suite" \
            -F "file=@${TEST_APK}")
          echo "RESPONSE: $RESPONSE"
          echo "test_url=$(echo "$RESPONSE" | python3 -c "import sys, json; print(json.load(sys.stdin).get('test_url', ''))")" >> "$GITHUB_OUTPUT"

      - name: Run Espresso test on BrowserStack
        id: run_test
        env:
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
        run: |
          APP_URL="${{ steps.upload_app.outputs.app_url }}"
          TEST_URL="${{ steps.upload_test_suite.outputs.test_url }}"
          echo "Running Espresso test on BrowserStack..."
          echo "APP_URL=$APP_URL"
          echo "TEST_URL=$TEST_URL"
          RUN_RESPONSE=$(curl -s -u "${BROWSERSTACK_USERNAME}:${BROWSERSTACK_ACCESS_KEY}" \
            -X POST "https://api-cloud.browserstack.com/app-automate/espresso/v2/test-suite" \
            --data-urlencode "app=$APP_URL" \
            --data-urlencode "testSuite=$TEST_URL" \
            --data-urlencode "devices=[{\"device\":\"Google Pixel 7\",\"os_version\":\"13.0\"}]" \
            --data-urlencode "deviceLogs=true" \
            --data-urlencode "networkLogs=true")
          echo "RUN_RESPONSE: $RUN_RESPONSE"
          echo "build_id=$(echo "$RUN_RESPONSE" | python3 -c "import sys, json; print(json.load(sys.stdin).get('build_id', ''))")" >> "$GITHUB_OUTPUT"

      - name: Wait for BrowserStack test completion
        env:
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
        run: |
          BUILD_ID="${{ steps.run_test.outputs.build_id }}"
          for i in {1..60}; do
            STATUS_RESPONSE=$(curl -s -u "${BROWSERSTACK_USERNAME}:${BROWSERSTACK_ACCESS_KEY}" \
              -X GET "https://api-cloud.browserstack.com/app-automate/espresso/v2/builds/${BUILD_ID}")
            STATUS=$(echo "$STATUS_RESPONSE" | python3 -c "import sys, json; print(json.load(sys.stdin).get('status', ''))")
            echo "Current status: $STATUS"
            if [ "$STATUS" = "done" ]; then
              break
            fi
            sleep 10
          done
          if [ "$STATUS" != "done" ]; then
            echo "Test did not finish in expected time."
            exit 1
          fi

      - name: Download BrowserStack test results
        id: get_report
        env:
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
        run: |
          BUILD_ID="${{ steps.run_test.outputs.build_id }}"
          mkdir -p browserstack-results
          BUILD_INFO=$(curl -s -u "${BROWSERSTACK_USERNAME}:${BROWSERSTACK_ACCESS_KEY}" \
            -X GET "https://api-cloud.browserstack.com/app-automate/espresso/v2/builds/${BUILD_ID}")
          REPORT_URL=$(echo "$BUILD_INFO" | python3 -c "import sys, json; print(json.load(sys.stdin).get('public_url', ''))")
          echo "Test report: $REPORT_URL"
          echo "Test report: $REPORT_URL" >> $GITHUB_STEP_SUMMARY
          echo "$REPORT_URL" > browserstack-results/report_url.txt

      - name: Upload BrowserStack results artifact
        uses: actions/upload-artifact@v4
        with:
          name: browserstack-results
          path: browserstack-results/
