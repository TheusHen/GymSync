name: Build APK with Makefile, Upload to BrowserStack App Automate and Collect Results

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build_apk:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y curl git unzip xz-utils zip make libglu1-mesa libc6:amd64 libstdc++6:amd64 lib32z1 libbz2-1.0:amd64

      - name: Download and set up Flutter
        run: |
          curl -O https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_3.32.6-stable.tar.xz
          tar xf flutter_linux_3.32.6-stable.tar.xz
          echo "$PWD/flutter/bin" >> $GITHUB_PATH
          export PATH="$PWD/flutter/bin:$PATH"
          flutter --version

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Verify environments
        run: |
          flutter --version
          dart --version
          node --version
          npm --version

      - name: Build APK with Makefile
        run: make apk

      - name: Check if APK was generated
        run: |
          if [ ! -f apps/mobile_app/build/app/outputs/flutter-apk/app-release.apk ]; then
            echo "APK not found!"
            exit 1
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: apps/mobile_app/build/app/outputs/flutter-apk/app-release.apk

  browserstack_test:
    needs: build_apk
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: app-release-apk
          path: ./apk/

      - name: Verify APK artifact
        run: |
          ls -lh ./apk
          if [ ! -f ./apk/app-release.apk ]; then
            echo "APK artifact not found after download!"
            exit 1
          fi

      - name: Upload app APK to BrowserStack
        id: upload_app
        env:
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
        run: |
          set -e
          echo "Uploading APK to BrowserStack..."
          APP_UPLOAD_RESPONSE=$(curl -s -u "${BROWSERSTACK_USERNAME}:${BROWSERSTACK_ACCESS_KEY}" \
            -X POST "https://api-cloud.browserstack.com/app-automate/upload" \
            -F "file=@./apk/app-release.apk")
          echo "APP_UPLOAD_RESPONSE: $APP_UPLOAD_RESPONSE"
          APP_URL=$(echo "$APP_UPLOAD_RESPONSE" | python3 -c "import sys, json; d=json.load(sys.stdin); print(d.get('app_url', ''))")
          if [ -z "$APP_URL" ]; then
            echo "Failed to get app_url from BrowserStack response. Response: $APP_UPLOAD_RESPONSE"
            exit 1
          fi
          echo "APP_URL=$APP_URL" | tee -a $GITHUB_ENV
          echo "::set-output name=app_url::$APP_URL"

      - name: Run Espresso test on BrowserStack
        id: run_test
        env:
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          APP_URL: ${{ env.APP_URL }}
        run: |
          set -e
          echo "Running Espresso test on BrowserStack..."
          if [ -z "$APP_URL" ]; then
            echo "APP_URL is not set!"
            exit 1
          fi
          RUN_RESPONSE=$(curl -s -u "${BROWSERSTACK_USERNAME}:${BROWSERSTACK_ACCESS_KEY}" \
            -X POST "https://api-cloud.browserstack.com/app-automate/espresso/v2/test-suite" \
            -d "app=$APP_URL" \
            -d "devices=[{\"device\":\"Google Pixel 7\",\"os_version\":\"13.0\"}]" \
            -d "deviceLogs=true" \
            -d "networkLogs=true")
          echo "RUN_RESPONSE: $RUN_RESPONSE"
          BUILD_ID=$(echo "$RUN_RESPONSE" | python3 -c "import sys, json; d=json.load(sys.stdin); print(d.get('build_id', ''))")
          if [ -z "$BUILD_ID" ]; then
            echo "Failed to get build_id from BrowserStack response. Response: $RUN_RESPONSE"
            exit 1
          fi
          echo "BUILD_ID=$BUILD_ID" | tee -a $GITHUB_ENV
          echo "::set-output name=build_id::$BUILD_ID"
          echo "BrowserStack build id: $BUILD_ID"

      - name: Wait for BrowserStack test completion
        env:
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          BUILD_ID: ${{ env.BUILD_ID }}
        run: |
          set -e
          echo "Waiting for BrowserStack test completion..."
          for i in {1..60}; do
            STATUS_RESPONSE=$(curl -s -u "${BROWSERSTACK_USERNAME}:${BROWSERSTACK_ACCESS_KEY}" \
              -X GET "https://api-cloud.browserstack.com/app-automate/espresso/v2/builds/${BUILD_ID}")
            STATUS=$(echo "$STATUS_RESPONSE" | python3 -c "import sys, json; print(json.load(sys.stdin).get('status', ''))")
            echo "Current status: $STATUS"
            if [ "$STATUS" = "done" ]; then
              break
            fi
            sleep 10
          done
          if [ "$STATUS" != "done" ]; then
            echo "Test did not finish in expected time." && exit 1
          fi

      - name: Download BrowserStack test results
        id: get_report
        env:
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          BUILD_ID: ${{ env.BUILD_ID }}
        run: |
          set -e
          mkdir -p browserstack-results
          BUILD_INFO=$(curl -s -u "${BROWSERSTACK_USERNAME}:${BROWSERSTACK_ACCESS_KEY}" \
            -X GET "https://api-cloud.browserstack.com/app-automate/espresso/v2/builds/${BUILD_ID}")
          REPORT_URL=$(echo "$BUILD_INFO" | python3 -c "import sys, json; print(json.load(sys.stdin).get('public_url', ''))")
          echo "Test report: $REPORT_URL"
          echo "Test report: $REPORT_URL" >> $GITHUB_STEP_SUMMARY
          echo $REPORT_URL > browserstack-results/report_url.txt

      - name: Upload BrowserStack results artifact
        uses: actions/upload-artifact@v4
        with:
          name: browserstack-results
          path: browserstack-results/
